{"name":"James Somers (jsomers.net)","body":"# Older code\r\n\r\nWhat follows is a small but somewhat representative sample of the code that I've written:\r\n\r\n* <a href=\"http://jimbojeopardy.com\">Jimbo Jeopardy!</a> is a playable version of the <a href=\"http://j-archive.com\">j-archive</a>. It lets you play more than twenty years worth of real Jeopardy games. Here is a link to the <a href=\"http://github.com/jsomers/j-jeopardy\">github project page</a>. You can read a blog post about it <a href=\"/blog/jimbo-jeopardy\">here</a>. Or <a href=\"http://jimbojeopardy.com\">click here to play now</a>!\r\n\r\n* After <a href=\"http://www.linkedin.com/pub/adam-goldstein/22/bbb/510\">Adam</a> left, I rewrote <a href=\"http://booktour.com\">BookTour.com</a> in Ruby on Rails.\r\n\r\n* With two other students, <a href=\"http://www-personal.umich.edu/~mjbommar/\">Michael Bommarito</a> and <a href=\"http://www.cscs.umich.edu/~jzelner/\">Jon Zelner</a>, I built a small system to help researchers at the University of Michigan's <a href=\"http://cscs.umich.edu\">Center for the Study of Complex Systems</a> manage and analyze data from big runs of agent-based model simulations. We were funded by Google as part of their Summer of Code (2008). Here you can <a href=\"http://code.google.com/p/google-summer-of-code-2008-cscs/downloads/detail?name=James_Somers.tar.gz&can=2&q=\">download</a> some of our code.\r\n\r\n* As discussed in <a href=\"/blog/directions\">this blog post</a>, I tapped into the Google Directions API to answer a few neat questions about driving directions, including \"What's the most complicated route in the United States?\" The relevant code is <a href=\"http://github.com/jsomers/directions\">here</a>.\r\n\r\n* I wrote up my solution to <a href=\"http://projecteuler.net\">Project Euler</a> problem #106 in <a href=\"http://jsomers.net/blog/pe-oeis\">this blog post</a>. Here is a more recent <a href=\"/code/215.html\">solution</a>, this time in Ruby, to problem #215. And here's a <a href=\"/blog/project-euler-problem-191-or-how-i-learned-to-stop-counting-and-love-induction\">write-up for problem #191</a>.\r\n\r\n* On <a href=\"/110\">this page</a> I wrote some Javascript to quickly generate rows of the <a href=\"http://en.wikipedia.org/wiki/Rule_110\">Rule 110 cellular automaton</a>.\r\n\r\n* I spent a few frantic weeks on a project called \"draftback,\" which was designed to give writers fine-grained feedback on their writing, fast. It worked&mdash;in fact I think it worked well, in spite of some minor bugs&mdash;but my attention and interest slowly waned. The code is <a href=\"http://github.com/jsomers/draftback\">here</a>. I eventually expect to revive this in some form or another.\r\n\r\n* For a while I went on a kick playing the Facebook game called <a href=\"http://facebook.com/scramble\">Scramble</a>, and eventually I wrote <a href=\"/code/scramble.html\">a solver</a> for it. Along those same lines, I wrote <a href=\"/code/puzzles.html\">a program</a> to generate word puzzles like the ones found in <a href=\"http://www.sporcle.com/games/cheezguyty/word_patterns_1\">this Sporcle game</a>, where you're given a six-letter template, say, `_ L _ _ _ X`, and asked to find the word that fits.\r\n\r\n* I had an idea for an application that would collect analog feedback on web videos. So as someone's watching a Steven Colbert clip, for instance, she might wiggle her mouse whenever she found Steven particularly funny. The funnier she found him, the harder she'd wiggle. That data about her interest and engagement (mapped to particular moments in the video) would be collated with data from other viewers. Here's <a href=\"/mousy.html\">a simple demo</a>, and here's <a href=\"http://github.com/jsomers/Mousy\">the Github repository</a> for the demo.\r\n\r\n* I'm working on a real-time multiplayer version of <a href=\"http://sporcle.com\">Sporcle</a> called \"Quiz Dash,\" built on Rails and node.js. Here's a link to <a href=\"http://github.com/jsomers/quizdash\">the Github repository</a>.\r\n\r\n* I've always wanted a simple utility for copyediting that would let me make insertions, deletions, and comments with the lowest possible overhead. The idea is in the same neighborhood as (but importantly different from) that \"draftback\" tool described in #7 above. Anyway, check out what I ended up calling \"<a href=\"http://diffly.heroku.com\">diffly</a>.\" Here's the <a href=\"http://github.com/jsomers/diffly\">source code</a>.\r\n\r\n* Some friends in college taught me an Indian trick-taking game called Mindy Coat that feels very much like Spades or Euchre. Since we graduated everyone has spread around the globe&mdash;and so in order to play I had to make <a href=\"http://mindycoat.com\">a real-time multiplayer online version of the Mindy Coat game</a>. You can browse its source at <a href=\"http://github.com/jsomers/mindy\">its Github project page</a>.\r\n\r\n* After Google stripped their Reader product of its social features, I set out to build a clone called <a href=\"http://readertron.com\">Readertron</a>. You can find its <a href=\"http://github.com/jsomers/readertron\">source on Github</a>.\r\n\r\n```ruby\r\nwords = File.open(\"/usr/share/dict/words\").read.split(\"\\n\").map(&:downcase)\r\n \r\nanagram_index = words.inject(Hash.new {[]}) { |idx, word| idx[word.split(\"\").sort] += [word]; idx }\r\np anagram_index.select {|_, v| v.length == 4}\r\n```","google":"","tagline":"all the code that's fit to `print`","note":"Don't delete this file! It's used internally to help with page regeneration."}